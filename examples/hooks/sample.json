{
  // The upload object contains the upload's details
  "Upload": {
    // The upload's ID. Will be empty during the pre-create event
    "ID": "14b1c4c77771671a8479bc0444bbc5ce",
    // The upload's total size in bytes.
    "Size": 46205,
    // The upload's current offset in bytes.
    "Offset": 1592,
    // These properties will be set to true, if the upload as a final or partial
    // one. See the Concatenation extension for details:
    // http://tus.io/protocols/resumable-upload.html#concatenation
    "IsFinal": false,
    "IsPartial": false,
    // If the upload is a final one, this value will be an array of upload IDs
    // which are concatenated to produce the upload.
    "PartialUploads": null,
    // The upload's metadata which can be supplied by the clients as it wishes.
    // All keys and values in this object will be strings.
    // Be aware that it may contain maliciously crafted values and you must not
    // trust it without escaping it first!
    "MetaData": {
      "filename": "transloadit.png"
    },
    // Details about where the data store saved the uploaded file. The different
    // available keys vary depending on the used data store.
    "Storage": {
      // For example, the filestore supplies the absolute file path:
      "Type": "filestore",
      "Path": "/my/upload/directory/14b1c4c77771671a8479bc0444bbc5ce",

      // The S3Store and GCSStore supply the bucket name and object key:
      "Type": "s3store",
      "Bucket": "my-upload-bucket",
      "Key": "my-prefix/14b1c4c77771671a8479bc0444bbc5ce"
    }
  },
  // Details about the HTTP request which caused this hook to be fired.
  // It can be used to record the client's IP address or inspect the headers.
  "HTTPRequest": {
    "Method": "PATCH",
    "URI": "/files/14b1c4c77771671a8479bc0444bbc5ce",
    "RemoteAddr": "1.2.3.4:47689",
    "Header": {
      "Host": ["myuploads.net"],
      "Cookies": ["..."]
    }
  }
}